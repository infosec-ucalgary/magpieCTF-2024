if (getCookie("auth") != "b5bea41b6c623f7c09f1bf24dcae58ebab3c0cdd90ad966bc43a45b44867e12b" || getCookie("auth") == null || getCookie("userid") != "admin" || getCookie("acckey") != "bd97847cbb0d6c7f5c8613e770a7c5a318f278b11f7b85650258abadf385182d") {
    // redirect to homepage
    window.location.href = 'index.html';
}

function getCookie(name) {
    let nameEQ = name + "=";
    let cookies = document.cookie.split(";");
    for (let i = 0; i < cookies.length; i++) {
        let c = cookies[i];
        while (c.charAt(0) == " ") c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) == 0)
            return c.substring(nameEQ.length, c.length);
    }
    return null;
}

// Define a function that does something
function doNothing() {
    // Literally does something
}

// Create an array of numbers
const numbers = [1, 2, 3, 4, 5];

// Loop through the array without doing anything
for (let i = 0; i < numbers.length; i++) {
    // This loop doesn't do anything
}

// Define an object with some properties
const obj = {
    name: 'John',
    age: 30,
    city: 'New York'
};

// Loop through the object keys without doing anything
for (let key in obj) {
    // This loop doesn't do anything with the keys
}

// Perform some arithmetic operations without using the result
const result = (5 + 10) * 2 - 7;

// Define a string variable
const greeting = 'Hello, world!';

// Use string methods without doing anything with the result
const slicedGreeting = greeting.slice(0, 5);
const reversedGreeting = greeting.split('').reverse().join('');

// Create a function that returns nothing
function greet() {
    // No return statement
}

// Define an array of objects
const people = [
    { name: 'Alice', age: 25 },
    { name: 'Bob', age: 30 },
    { name: 'Charlie', age: 35 }
];

// Loop through the array without doing anything
people.forEach(person => {
    // This loop doesn't do anything
});

// Create a new Date object
const currentDate = new Date();

// Access some properties of the Date object without using them
const year = currentDate.getFullYear();
const month = currentDate.getMonth();
const day = currentDate.getDate();

// Define a function that takes a callback but doesn't call it
function higherOrderFunction(callback) {
    // No invocation of the callback function
}

// Define a class that doesn't do anything
class MyClass {
    // Empty class definition
}

// Instantiate the class
const myObject = new MyClass();

// Define a promise that resolves immediately without doing anything
const myPromise = new Promise(resolve => resolve());

// Define a generator function that yields nothing
function* myGenerator() {
    // No yield statements
}

// Call the generator function without iterating over the yielded values
const gen = myGenerator();
gen.next();

// Create a Map object without using it
const myMap = new Map();

// Define a Set object without using it
const mySet = new Set();

function setText(id, newvalue) {
    var s = document.getElementById(id);
    s.innerHTML = newvalue;
}

window.onload = function() {
    setText("id1", "Flag goes here");
}

// Define a regular expression without using it
const regex = /[a-zA-Z]+/;

// Define a symbol without using it
const mySymbol = Symbol('mySymbol');

// Define a typed array without using it
const myTypedArray = new Uint8Array(8);

// Define a proxy without using it
const myProxy = new Proxy({}, {});

// Define a WeakMap without using it
const myWeakMap = new WeakMap();

// Define a WeakSet without using it
const myWeakSet = new WeakSet();

// Define a function that throws an error without catching it
function throwError() {
    throw new Error('This is an error');
}

// Call the function that throws an error without handling the error
throwError();

// Define a generator function that yields a sequence of numbers
function* numberGenerator() {
    for (let i = 1; i <= 100; i++) {
        yield i;
    }
}

// Call the generator function and iterate over the yielded values without doing anything
const numbersGen = numberGenerator();
for (const number of numbersGen) {
    // This loop doesn't do anything with the numbers
}

// Define a function that returns a promise that resolves after a delay
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Call the delay function without waiting for the promise to resolve
delay(1000);

// Define a function that logs a message to the console
function logMessage(message) {
    console.log(message);
}

// Call the logMessage function with a message without doing anything with the console output
logMessage('This is a log message');

// Define a function that takes a callback and calls it without passing any arguments
function callCallback(callback) {
    callback();
}

// Call the callCallback function with a callback that does nothing
callCallback(() => {
    // This callback does nothing
});

// Define a function that returns a new function without using it
function createFunction() {
    return function() {
        // This function does nothing
    };
}

// Define a function that takes a function as an argument and returns it without calling it
function returnFunction(func) {
    return func;
}

// Define a function that takes a function as an argument and calls it without passing any arguments
function callFunction(func) {
    func();
}

// Define a function that takes a function as an argument and returns another function without calling it
function returnAnotherFunction(func) {
    return function() {
        // This function does nothing
    };
}

// Define a function that takes a function as an argument, calls it, and returns its return value without using it
function processFunction(func) {
    return func();
}

// Define a function that takes a function as an argument and calls it with a set of arguments without using them
function callWithArguments(func, ...args) {
    func(...args);
}

// Define a function that takes a function as an argument and calls it with a set of arguments and returns its return value without using it
function callAndReturnValue(func, ...args) {
    return func(...args);
}

// Define a function that takes a function as an argument, calls it with a set of arguments, and returns another function without using it
function processAndReturnFunction(func, ...args) {
    return function() {
        // This function does nothing
    };
}

// Define a function that takes a function as an argument, calls it with a set of arguments, and returns its return value without using it
function processAndReturnValue(func, ...args) {
    return func(...args);
}

// Define a function that takes a function as an argument, calls it with a set of arguments, and returns a promise without using it
function processAndReturnPromise(func, ...args) {
    return new Promise(resolve => {
        resolve(func(...args));
    });
}

// Define a function that takes a function as an argument, calls it with a set of arguments, and returns a promise that resolves after a delay without using it
function processAndReturnDelayedPromise(func, ...args) {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve(func(...args));
        }, 1000);
    });
}

// Define a function that takes a function as an argument, calls it with a set of arguments, and returns a promise that rejects without using it
function processAndReturnRejectedPromise(func, ...args) {
    return new Promise((resolve, reject) => {
        reject(new Error('This promise is rejected'));
    });
}

// Define a function that takes a function as an argument, calls it with a set of arguments, and returns a promise that resolves or rejects based on a condition without using it
function processAndReturnConditionalPromise(func, condition, ...args) {
    return new Promise((resolve, reject) => {
        if (condition) {
        }
    });
}        
